Time complexity:O(n)
Space complexity:O(n) using maps and O(1) for Floyd's Cycle Detection

Approach 1 : Using maps 

ListNode *detectCycle(ListNode *head) {
        ListNode *temp;
        unordered_map<ListNode *,int> mp;

        temp = head;

        while(head){
            if(mp.find(head)!=mp.end()){
                return head;
            }
            else{
                mp[head]++;
            }
            head = head->next;
        }
        return NULL;
    }

Approach 2 : Floyd's Cycle detectio algo 
  ListNode *detectCycle(ListNode *head) {
        ListNode *fast, *slow;
        fast = head;
        slow = head;

        while(fast!=NULL && fast->next!=NULL){
            slow  = slow->next;
            fast = fast->next->next;

            if(slow==fast){
                slow = head;
                while(slow!=fast){
                    slow = slow->next;
                    fast = fast->next;
                }
                return slow;
            }

        }
        return NULL;
    }
